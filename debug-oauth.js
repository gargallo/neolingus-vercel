// Debug script para OAuth
require('dotenv').config({ path: '.env.local' });
console.log('üîç Verificando configuraci√≥n OAuth de Supabase...');

// Verificar variables de entorno
const requiredEnvVars = [
  'NEXT_PUBLIC_SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_ANON_KEY'
];

console.log('\nüìã Variables de entorno:');
requiredEnvVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    console.log(`‚úÖ ${varName}: ${value.substring(0, 20)}...`);
  } else {
    console.log(`‚ùå ${varName}: NO DEFINIDA`);
  }
});

// Intentar crear cliente de Supabase
try {
  const { createClient } = require('@supabase/supabase-js');
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );
  
  console.log('\n‚úÖ Cliente de Supabase creado exitosamente');
  
  // Verificar configuraci√≥n OAuth
  console.log('\nüîó Probando configuraci√≥n OAuth...');
  
  const redirectUrl = 'http://localhost:3000/auth/callback';
  console.log(`üìç URL de callback: ${redirectUrl}`);
  
} catch (error) {
  console.error('\n‚ùå Error creando cliente de Supabase:', error.message);
}

console.log('\nüéØ Pasos para solucionar problemas de OAuth:');
console.log('1. Verificar que las variables de entorno est√©n definidas');
console.log('2. Verificar configuraci√≥n OAuth en Supabase Dashboard');
console.log('3. Agregar URL autorizada: http://localhost:3000/auth/callback');
console.log('4. Verificar que el proveedor Google est√© habilitado');
